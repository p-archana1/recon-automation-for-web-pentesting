import os
import socket
import qrcode
import barcode
import random
import string
import requests
import json
from barcode.writer import ImageWriter
from pyfiglet import Figlet
from time import sleep

# IP Scanner - Ping to check if host is live
def ip_scanner(ip):
    print(f"Scanning IP: {ip}")
    response = os.system(f"ping -c 1 {ip}")
    if response == 0:
        print(f"{ip} is live")
    else:
        print(f"{ip} is not reachable")

# Port Scanner - Scan ports to check open or closed
def port_scanner(ip, start_port, end_port):
    print(f"Scanning ports {start_port} to {end_port} on {ip}...")
    open_ports = []
    for port in range(start_port, end_port + 1):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        result = sock.connect_ex((ip, port))
        if result == 0:
            open_ports.append(port)
        sock.close()
    
    if open_ports:
        print(f"Open ports on {ip}: {open_ports}")
    else:
        print(f"No open ports found on {ip} in the range {start_port} to {end_port}")

# Barcode Generator - Generates a barcode
def generate_barcode(data, barcode_type="code128"):
    print(f"Generating {barcode_type} barcode for data: {data}")
    bar = barcode.get_barcode_class(barcode_type)
    bar_code = bar(data, writer=ImageWriter())
    filename = bar_code.save(f"{data}_barcode")
    print(f"Barcode saved as {filename}.png")

# QR Code Generator - Generates a QR code
def generate_qrcode(data):
    print(f"Generating QR code for data: {data}")
    qr_img = qrcode.make(data)
    qr_img.save(f"{data}_qrcode.png")
    print(f"QR code saved as {data}_qrcode.png")

# Password Generator - Generates a strong password
def generate_password(length=12):
    characters = string.ascii_letters + string.digits + string.punctuation
    password = ''.join(random.choice(characters) for i in range(length))
    print(f"Generated password: {password}")
    return password

# Wordlist Generator - Generates a wordlist from provided words
def wordlist_generator(words, length=3):
    wordlist = []
    print(f"Generating wordlist of length {length} using: {words}")
    for _ in range(length):
        wordlist.append(''.join(random.sample(words, len(words))))
    with open("wordlist.txt", "w") as file:
        for word in wordlist:
            file.write(word + "\n")
    print(f"Wordlist generated and saved to wordlist.txt")

# Phone Number Information Gathering - Uses an API to fetch phone info
def phone_info(phone_number):
    print(f"Fetching info for phone number: {phone_number}")
    url = f"http://apilayer.net/api/validate?access_key=YOUR_API_KEY&number={phone_number}"
    response = requests.get(url)
    if response.status_code == 200:
        phone_data = response.json()
        print(json.dumps(phone_data, indent=4))
    else:
        print("Failed to fetch phone number info")

# Subdomain Checker - Fetches subdomains using an online service (API or scraping)
def subdomain_checker(domain):
    print(f"Checking subdomains for {domain}...")
    url = f"https://api.hackertarget.com/hostsearch/?q={domain}"
    response = requests.get(url)
    if response.status_code == 200:
        subdomains = response.text
        print(f"Subdomains for {domain}:\n{subdomains}")
    else:
        print(f"Failed to fetch subdomains for {domain}")

# DDoS Attack Simulation (educational purposes, only sends requests without real DDoS)
def ddos_simulation(target_url, packet_count=100):
    print(f"Simulating DDoS attack on {target_url} with {packet_count} packets...")
    for i in range(packet_count):
        try:
            requests.get(target_url)
            print(f"Packet {i+1} sent")
        except:
            print("Request failed")
        sleep(0.1)
    print("DDoS simulation complete")

# Display a welcome banner
def display_banner():
    f = Figlet(font='slant')
    print(f.renderText("Recon Automation Tool"))

# Main program
def main():
    display_banner()
    while True:
        print("\nSelect an option:")
        print("1. IP Scanner")
        print("2. Port Scanner")
        print("3. Barcode Generator")
        print("4. QRCode Generator")
        print("5. Password Generator")
        print("6. Wordlist Generator")
        print("7. Phone Number Information Gathering")
        print("8. Subdomain Checker")
        print("9. DDoS Simulation")
        print("10. Exit")

        choice = input("Enter your choice: ")

        if choice == "1":
            ip = input("Enter the IP address: ")
            ip_scanner(ip)

        elif choice == "2":
            ip = input("Enter the IP address: ")
            start_port = int(input("Enter the start port: "))
            end_port = int(input("Enter the end port: "))
            port_scanner(ip, start_port, end_port)

        elif choice == "3":
            data = input("Enter data for the barcode: ")
            generate_barcode(data)

        elif choice == "4":
            data = input("Enter data for the QR code: ")
            generate_qrcode(data)

        elif choice == "5":
            length = int(input("Enter the length of the password: "))
            generate_password(length)

        elif choice == "6":
            words = input("Enter words (comma separated) to generate wordlist: ").split(",")
            length = int(input("Enter the length of the wordlist: "))
            wordlist_generator(words, length)

        elif choice == "7":
            phone_number = input("Enter the phone number: ")
            phone_info(phone_number)

        elif choice == "8":
            domain = input("Enter the domain to check subdomains: ")
            subdomain_checker(domain)

        elif choice == "9":
            target_url = input("Enter the target URL for DDoS simulation: ")
            packet_count = int(input("Enter number of packets to send: "))
            ddos_simulation(target_url, packet_count)

        elif choice == "10":
            print("Exiting...")
            break

        else:
            print("Invalid choice. Please select a valid option.")

if __name__ == "__main__":
    main()
